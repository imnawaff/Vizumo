class GameScene: SKScene {
    enum State {
        case menu, playing
    }

    var gameState: State = .menu
    var startLabel: SKLabelNode!
    var spawnTimer: Timer?

    override func didMove(to view: SKView) {
        backgroundColor = .black
        showStartLabel()
    }

    func showStartLabel() {
        startLabel = SKLabelNode(fontNamed: "AvenirNext-Bold")
        startLabel.text = "Tap to Start"
        startLabel.fontSize = 36
        startLabel.fontColor = .green
        startLabel.position = CGPoint(x: frame.midX, y: frame.midY)
        addChild(startLabel)
    }

    func startGame() {
        gameState = .playing
        startLabel.removeFromParent()
        startSpawningBalls()
    }

    func startSpawningBalls() {
        spawnBall() // drop one immediately
        spawnTimer = Timer.scheduledTimer(withTimeInterval: 1.5, repeats: true) { _ in
            self.spawnBall()
        }
    }

    func stopSpawningBalls() {
        spawnTimer?.invalidate()
        spawnTimer = nil
    }

    func spawnBall() {
        let ball = SKShapeNode(circleOfRadius: 30)
        ball.fillColor = .red
        ball.name = "ball"
        let x = CGFloat.random(in: 60...(size.width - 60))
        ball.position = CGPoint(x: x, y: size.height + 60)
        addChild(ball)

        let move = SKAction.moveTo(y: -60, duration: 3.0)
        let remove = SKAction.removeFromParent()
        ball.run(SKAction.sequence([move, remove]))
    }

    override func touchesBegan(_ touches: Set<UITouch>, with event: UIEvent?) {
        guard let location = touches.first?.location(in: self) else { return }

        switch gameState {
        case .menu:
            startGame()
        case .playing:
            let nodesHere = nodes(at: location)
            for node in nodesHere {
                if node.name == "ball" {
                    node.removeFromParent()
                    // Later: add score, sound, etc.
                }
            }
        }
    }
}